fn __printstr(str: str) { unreachable }
fn __arraylen<T>(arr: &[T]) -> int { unreachable }
fn __arraypush<T>(arr: &[T], value: T) { unreachable }
fn __arraypop<T>(arr: &[T]) -> T { unreachable }
fn __strjoin(arr: [str]) -> str { unreachable }

impl str {
    fn len(self) -> int { unreachable }
    fn find(self, needle: str) -> int { unreachable }
    fn rfind(self, needle: str) -> int { unreachable }
}

impl int {
    fn chr(self) -> char { unreachable }
}

impl char {
    fn ord(self) -> int { unreachable }
}

fn print<T>(val: T) {
    __printstr("${val}")
}

fn println<T>(val: T) {
    __printstr("${val}\n")
}

impl<T> [T] {
    fn len(self: &self) -> int {
        __arraylen(self)
    }
    fn push(self: &self, val: T) {
        __arraypush(self, val)
    }
    fn pop(self: &self) -> T {
        __arraypop(self)
    }
}

impl [str] {
    fn join(self, separator: str) -> str {
        let arr = [];
        for i in self {
            arr.push(i);
            arr.push(separator);
        }
        if self.len() != 0 {
            arr.pop();
        }
        __strjoin(arr)
    }
}